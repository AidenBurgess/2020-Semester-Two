#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
% Variables to change every new document
\newcommand{\hmwkClass}{SOFTENG 325} % Course/class
\newcommand{\hmwkNumber}{1} % Assignment number

% Constants to set once
\newcommand{\hmwkAuthorName}{Aiden Burgess} % Your name
\newcommand{\hmwkUserID}{abur970} % User ID
\newcommand{\hmwkStudentNumber}{600280511} % Student number

% Packages
\usepackage{fancyhdr} % Required for custom headers
\usepackage{lastpage} % Required to determine the last page for the footer
\usepackage{extramarks} % Required for headers and footers

% Margins
\topmargin=-0.45in
\evensidemargin=0in
\oddsidemargin=0in
\textwidth=6.5in
\textheight=9.0in
\headsep=0.25in

% General document properties
\linespread{1.1} % Line spacing
\setlength\parindent{0pt} % Removes all indentation from paragraphs

% Required to not count titlepage in page numbering
\addtocounter {page} {-1}

% Make a simple command for use in document body
\newcommand{\start}{
\maketitle
\thispagestyle{empty}
\newpage
}

% Set up the header and footer
\pagestyle{fancy}
\lhead{\hmwkAuthorName} % Top left header
\rhead{\hmwkClass:\ Assignment\ \#\hmwkNumber}
\lfoot{\lastxmark} % Bottom left footer
\cfoot{} % Bottom center footer
\rfoot{Page\ \thepage\ of\ \protect\pageref{LastPage}} % Bottom right footer
\renewcommand\headrulewidth{0.4pt} % Size of the header rule
\renewcommand\footrulewidth{0.4pt} % Size of the footer rule

% The following 2 commands setup the title page
\title{
\vspace{2in}
\textmd{\textbf{\hmwkClass:\ Assignment\ \#\hmwkNumber}}\\
\normalsize\vspace{0.1in}\small{ \today }\\
\vspace{3in}
}

\author{
  \textbf{\hmwkAuthorName} \\
  \texttt{\hmwkUserID \hspace{0.1in}- \hmwkStudentNumber}
}

% Do not display standard date since we use a custom date
\date{}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation skip
\defskip bigskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
start
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Scalability - How have you made an effort to improve the scalability of
 your web service?
\end_layout

\begin_layout Subsubsection*
Stateless
\end_layout

\begin_layout Standard
The web service does not hold any information about client sessions.
 Instead, it provides cookies to the client which they may use for authenticatio
n.
 These cookies are obtained through the login service, and used when retrieiving
 user-specific information, or performing changes to the database.
\end_layout

\begin_layout Standard
This allows the web service to be easily replicated.
 Each replicated server acts identically to handling the requests.
\end_layout

\begin_layout Subsubsection*
RESTful Architecture
\end_layout

\begin_layout Standard
The web service uses a RESTful architecture, which allows us to perform
 optimisations
\end_layout

\begin_layout Subsubsection*
Resources split into classes
\end_layout

\begin_layout Standard
Resources split into different classes, so more functionality can be added
 later on.
 And it is easier to build upon existing resources
\end_layout

\begin_layout Standard
SQL statements are all held reusable from ConcertUtils
\end_layout

\begin_layout Subsection*
Identify (implicit and explicit) uses of lazy loading and eager fetching
 within your web service, and justify why those uses are appropriate in
 the context of this web service?
\end_layout

\begin_layout Standard
Concert lazy loads performers and dates, as when concert summaries are retrieved
, all the performers and dates will be retrieved, without being used.
 These have been further optimised to user FetchMode.SUBSELECT, avoiding
 the n+1 problem, as when retrieving performers and dates, we need all of
 them.
\end_layout

\begin_layout Standard
Booking also uses FetchMode.SUBSELECT to retrieve the seats for a booking,
 as currently, when retrieving a booking, we always need all the seats.
 The ConcertDate and User are lazy loaded, as these are not always needed,
 and there is no n+1 problem as these are single values.
\end_layout

\begin_layout Standard
ConcertDate lazy loads Concert, as often we only need to retrieve the date,
 which increases our performance.
\end_layout

\begin_layout Subsection*
How have you made an effort to remove the possibility of issues arising
 from concurrent access, such as double-bookings?
\end_layout

\begin_layout Standard
Single transaction to book all seats at once, increment seats version, so
 no two transactions can commit a change to the same seat at a time
\end_layout

\begin_layout Standard
Ensure seat versions have not changed at commit time.
 If they have changed then fail the entire transaction.
 This is the default behaviour of JPA as each Seat has a verison attribute.
\end_layout

\begin_layout Standard
Subscriptions are iterated through synchronized
\end_layout

\begin_layout Subsection*
How would you extend your web service to add support for the following new
 features?
\end_layout

\begin_layout Subsubsection*
Support for different ticket prices per concert (currently ticket prices
 are identical for each concert)
\end_layout

\begin_layout Standard
Add ticket price field to Seat, which is determined when the seats are initialis
ed for a new concert date.
 This field should also be added to the seatDTO class, as the client might
 need such information.
\end_layout

\begin_layout Subsubsection*
Support for multiple venues (currently all concerts are assumed to be at
 the same venue with an identical seat layout)
\end_layout

\begin_layout Standard
Currently the web service relies on only one concert allowed per date.
 With multiple venues, it is assumed that there may be multiple concerts
 per day.
 To accomodate this change, a Venue class should be introduced, which stores
 information about a venue, such as the id, name, and description.
 A venue field will be added to the Concert class.
 Concert will be made an id attribute of ConcertDate, as there can be more
 than one concert per date.
 A venue DTO class will be added, and concertDTO will be modified.
 Some retrieval queries will be modified in the ConcertUtils class.
\end_layout

\begin_layout Standard
A VenueResource class will be added to support endpoints regarding venues.
\end_layout

\begin_layout Subsubsection*
Support for "held" seats (where, after a user selects their seats, they
 are reserved for a period of time to allow the user time to pay.
 If the user cancels payment, or the time period elapses, the seats are
 automatically released, able to be booked again by other users).
\end_layout

\begin_layout Standard
The bookingStatus enum will be extended with a HELD value.
 Endpoints will be added to the BookingResource to support reserving and
 paying for a booking.
 In order to ensure no double bookings, the seats will be labeled as booked,
 until either a user cancels or the time is exceeded.
 To support the periodic removal of reservations, a timer can be set up
 to trigger at a set interval, checking a list of reservations to confirm
 if their time period has elapsed.
\end_layout

\end_body
\end_document
